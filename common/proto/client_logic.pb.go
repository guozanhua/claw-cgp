// Code generated by protoc-gen-go.
// source: client_logic.proto
// DO NOT EDIT!

package proto

import proto1 "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto1.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type CLPing struct {
	Time             *int32 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CLPing) Reset()         { *m = CLPing{} }
func (m *CLPing) String() string { return proto1.CompactTextString(m) }
func (*CLPing) ProtoMessage()    {}

func (m *CLPing) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type LCRetPong struct {
	Time             *int32 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LCRetPong) Reset()         { *m = LCRetPong{} }
func (m *LCRetPong) String() string { return proto1.CompactTextString(m) }
func (*LCRetPong) ProtoMessage()    {}

func (m *LCRetPong) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type CLChat struct {
	Type             *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	User             *string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Timestamp        *int32  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Text             *string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLChat) Reset()         { *m = CLChat{} }
func (m *CLChat) String() string { return proto1.CompactTextString(m) }
func (*CLChat) ProtoMessage()    {}

func (m *CLChat) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *CLChat) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *CLChat) GetTimestamp() int32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CLChat) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func init() {
}
